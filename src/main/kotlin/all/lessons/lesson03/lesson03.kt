package org.example.all.lessons.lesson03

const val wheels = 4

class lesson03 {
    //Подбери подходящие способы объявления, названия и значения для следующих сущностей:
//


    //Уникальный номер шасси, генерируется при создании и не изменяется
    val vincode: String = "VAR33345"

    //Цвет автомобиля, может быть перекрашен
    var color: String = "red"

    //Пробег, изменяется со временем
    var miles: Int = 0

    //Имя владельца, может быть неизвестно
    lateinit var ownername: String

//Полис обязательного страхования, устанавливается после покупки автомобиля

    //Количество колёс, общее для всех автомобилей и неизменяемое
    val wheels: Int = 4




}
//
//Файлы Конфигурации
//
//build.gradle.kts: Здесь вы указываете group и version, соответствующие Group ID и версии вашего проекта.
//
//group = "com.stimmax"
//version = "1.0.0"
//
//settings.gradle.kts: В этом файле указывается имя проекта (Artifact ID):
//
//rootProject.name = "kotlin-course"
//
//Структура Директорий и Пакетов
//
//Структура директорий в вашем проекте должна отражать Group ID и Artifact ID. Создание пакетов в соответствии с этими идентификаторами не только улучшает организацию кода, но и облегчает его импорт и управление.
//
//Например, если ваш Group ID — com.stimmax, а Artifact ID — kotlin-course, то базовый пакет вашего проекта может быть com.stimmax.kotlin-course. Внутри этого пакета вы можете создавать дополнительные пакеты и классы для организации кода.
//Лучшие Практики
//
//Названия пакетов и классов должны быть интуитивно понятными и отражать их назначение, но при этом могут быть сокращены для удобства. Избегайте слишком длинных и запутанных имен, которые могут затруднить чтение и понимание кода.
//
//Пример сокращения имени компании и названия проекта
//
//Компания: International Cybernetic Technologies Corporation
//Проект: Advanced Communication and Data Analysis System
//Group ID: com.icybertech
//Artifact ID: acdas
//packge: com.icybertech.acdas
//
//Переменные
//
//Переменные в Kotlin - это основа для хранения данных. Kotlin предлагает несколько способов объявления переменных, каждый из которых имеет свои особенности и применения.
//Объявление Переменных
//
//val - неизменяемая переменная
//
//Используется для объявления неизменяемой переменной. После присвоения значения, оно не может быть изменено.
//
//Пример:
//
//val name: String = "Alice"
//
//Здесь name - это переменная типа String (строка), и её значение не может быть изменено после инициализации.
//
//var - изменяемая переменная
//
//Используется для объявления переменной, значение которой может изменяться.
//
//Пример:
//
//var age: Int = 30
//age = 31 // Допустимо
//
//Здесь age - это переменная типа Int (целое число), и её значение можно изменять.
//
//const val - константа
//
//Используется внутри объекта или компаньона, либо вне класса для определения константы, значение которой известно во время компиляции и не изменяется во время выполнения. Константа не может быть вычисляемой (определяться результатом выполнения метода)
//
//Пример:
//
//class SampleClass {
//
//    companion object {
//        const val PI = 3.14
//    }
//}
//
//Также можно за пределами класса
//
//const val PI = 3.14
//
//class SampleClass {
//
//    // some code
//}
//
//PI является константой и не может быть изменена.
//Отложенная и Ленивая Инициализация
//
//lateinit - отложенная инициализация
//
//Используется, когда переменная не может быть инициализирована в момент создания объекта, но будет инициализирована позже.
//
//Пример:
//
//lateinit var phoneNumber: String
//
//phoneNumber будет инициализирована позже в коде.
//
//Отложенную инициализацию нельзя использовать с примитивами, такие как Int, Long, Double, Float, Boolean, Char из-за ограничений JVM на эту операцию. Поэтому lateinit подойдёт для любых типов кроме примитивов.
//
//by lazy - ленивая инициализация
//
//Значение переменной инициализируется только при первом обращении к ней.
//
//Пример:
//
//val lazyValue: String by lazy {
//    "Hello, this is a lazy string!"
//}
//
//lazyValue инициализируется только при первом вызове.
//Типы данных
//
//В Kotlin тип данных переменной обычно определяется автоматически, но вы можете указать его явно.
//
//Пример:
//
//var score: Int = 10
//// обозначение nullable переменной
//var speed: Double? = null
//
//Геттеры и Сеттеры
//
//В Kotlin для каждой переменной var автоматически создаются геттер и сеттер. Вы можете определить собственные геттеры и сеттеры для изменения поведения по умолчанию.
//
//get() - геттер, то-есть функция получения данных из переменной. Она может возвращать просто значение переменной, а может и выполнять какой-то код и возвращать результат работы этого кода.
//
//set() - сеттер, то-есть функция установки значения для переменной. Может быть определена только для изменяемых переменных. Может как устанавливать значение напрямую в переменную, так и обрабатывать его или проверять на валидность и после этого вставлять или например выдавать ошибку.
//
//field - специальное зарезервированное слово для обозначения поля переменной. Из него можно получить текущее значение переменной либо установить в него новое значение.
//
//Пример:
//
//var count: Int = 0
//    get() {
//        return if (field > 100) field else 0
//    }
//    set(value) {
//        if (value >= 0) field = value
//    }
//
//Здесь для count определены собственные геттер и сеттер. Геттер выдаёт значение счётчика только в том случае если он больше 100, иначе выдаёт 0. Сеттер проверяет, что новое значение неотрицательно.
//





//Практические задания
//
//Для определения типа переменной, можно задать ей несколько вопросов:
//
//Должна ли переменная изменяться со временем? (val или var)
//Может ли она быть установлена при инициализации? (lateinit var для отложенной инициализации)
//Каким значением должно быть при инициализировано?
//Требуется ли немедленная инициализация значения, либо же больше подходит инициализация в момент обращения? (через by lazy)
//Как назвать переменную, чтобы другой человек прочитав этот код мог понять, что она хранит?
//
//Подбери подходящие способы объявления, названия и значения для следующих сущностей:
//


//Уникальный номер шасси, генерируется при создании и не изменяется
val vincode: String = "VAR33345"

//Цвет автомобиля, может быть перекрашен
var color: String = "red"

//Пробег, изменяется со временем
var miles: Int = 0

//Имя владельца, может быть неизвестно
lateinit var ownername: String

//Полис обязательного страхования, устанавливается после покупки автомобиля

//Количество колёс, общее для всех автомобилей и неизменяемое
val weels: Int = 4


//Детальный отчёт об истории автомобиля требуемый для утилизации
val history: String by lazy {
"sample text"
}


//Запас топлива (при установке делать проверку)
//Уникальный номер двигателя
//Текущая скорость
//Тип топлива
//Количество предыдущих владельцев
//Документ о регистрации
//Полные технические характеристики по всем компонентам автомобиля
//Давление в шинах (при установке делать проверку)
//Серийный номер автомобиля, уникален и неизменяем
//Состояние кондиционера (включен/выключен)
//Уровень заряда батареи, изменяется со временем для электромобилей
//Дата последнего технического обслуживания, может быть неизвестна
//Система навигации, устанавливается в момент приобретения автомобиля. Без неё не продаётся.
//Оценочная вычисляемая рыночная стоимость на момент выставления в салон
//Температура внутри салона (при установке делать проверку)